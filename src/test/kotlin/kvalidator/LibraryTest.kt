/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kvalidator

import kotlinx.serialization.json.*
import kotlinx.serialization.json.Json
import kvalidator.i18n.ru
import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertTrue


class LibraryTest {
    val json = Json(JsonConfiguration.Stable)
    val data = this::class.java.getResource("/data.json").readText().let { json.parseJson(it) }.jsonObject


    @Test
    fun sizeNotEqualToUserNumber() {
        val rules = mapOf<String, List<Rule>>("age" to listOf(Size(-10)))
        assertTrue(Validator(data["sizeNotEqualToUserNumber"]!!, rules, ru).validate(), "result should return true")
    }

    @Test
    fun betweenRuleValid() {
        val rules = mapOf<String, List<Rule>>(
                "one_number" to listOf(Between(5, 30)),
                "one_string" to listOf(Between(3, 7))
        )
        assertTrue(Validator(data["between_data"]!!, rules, ru).validate(), "result should return true")
    }

    @Test
    fun betweenRuleNotValid() {
        val rules = mapOf<String, List<Rule>>(
                "one_number" to listOf(Between(1, 3)),
                "one_string" to listOf(Between(6, 14))
        )

        assertFalse(Validator(data["between_data"]!!, rules, ru).validate(), "result should return false")
    }


    @Test
    fun alphaFun() {
        val jsonTestData: JsonElement = JsonObject(mapOf("gg" to JsonPrimitive("jjJJjj"), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("gg" to listOf(Alpha()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkAlphaNum() {
        val jsonTestData: JsonElement = JsonObject(mapOf("gg" to JsonPrimitive("hhHHFhh"), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("gg" to listOf(AlphaNum()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkAlphaDash() {
        val jsonTestData: JsonElement = JsonObject(mapOf("gg" to JsonPrimitive("-_AAДДдhhh5"), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("gg" to listOf(AlphaDash()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkUrl() {
        val jsonTestData: JsonElement = JsonObject(mapOf("url" to JsonPrimitive("https://google.com"), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("url" to listOf(Url()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkEmail() {
        val jsonTestData: JsonElement = JsonObject(mapOf("email" to JsonPrimitive("ggg@kk998.com"), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("email" to listOf(Email()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkInteger() {
        val jsonTestData: JsonElement = JsonObject(mapOf("int" to JsonPrimitive(8), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("int" to listOf(IsInteger()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkArray() {
        val jsonTestData: JsonElement = JsonObject(mapOf("array" to JsonArray(listOf(JsonPrimitive("hhHHFhh")))))
        val rules = mapOf<String, List<Rule>>("array" to listOf(IsArray()))
        val result = Validator(jsonTestData, rules).validate()
    }
    @Test
    fun checkDate() {
        val jsonTestData: JsonElement = JsonObject(mapOf("date" to JsonPrimitive("uuu"), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val rules = mapOf<String, List<Rule>>("date" to listOf(IsDate()))
        val result = Validator(jsonTestData, rules).validate()
    }

//    @Test
//    fun testqq() {
//        val p1 = JsonPrimitive(200)
//        val p2 = JsonPrimitive("200")
//        val p3 = JsonPrimitive(true)
//
//        val l1 = p1 as JsonLiteral
//        val l2 = p2 as JsonLiteral
//        val l3 = p3 as JsonLiteral
//
//        println("l1 is String? ${l1.isString}")
//        println("l2 is String? ${l2.isString}")
//        println("l3 is String? ${l3.isString}")
//    }
    /*
    @Test
    fun test2() {
        val data = JsonObject(mapOf(
                "name" to JsonPrimitive("John"),
                "email" to JsonPrimitive("john@gmail.com"),
                "age" to JsonPrimitive(28)
        ))

        val rules = mapOf(
                "name" to listOf(Required(), Size(10), Integer())
                "age" to listOf(Required(), Email(10))
        )

        validate(data, rules)
    }

     */
}

