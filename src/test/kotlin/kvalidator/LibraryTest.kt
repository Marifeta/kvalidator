/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kvalidator

import kotlinx.serialization.Required
import kotlinx.serialization.json.*
import java.util.*
import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertTrue


class LibraryTest {

    @Test
    fun testSomeLibraryMethod() {
        val classUnderTest = Library()
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'")
    }
    @Test
    fun sizeNotEqualToUserNumber() {
        val jsonTestData: JsonElement = JsonObject(mapOf("age" to JsonPrimitive(-10), "bio" to JsonObject(mapOf("name" to JsonPrimitive("Diego")))))
        val date = Date()
        println(date)
        val rules = mapOf<String, List<Rule>>("age" to listOf(Size(-10)))
        val result = Validator(jsonTestData, rules).validate()
        assertTrue(result, "result should return true")
    }

//    @Test
//    fun testqq() {
//        val p1 = JsonPrimitive(200)
//        val p2 = JsonPrimitive("200")
//        val p3 = JsonPrimitive(true)
//
//        val l1 = p1 as JsonLiteral
//        val l2 = p2 as JsonLiteral
//        val l3 = p3 as JsonLiteral
//
//        println("l1 is String? ${l1.isString}")
//        println("l2 is String? ${l2.isString}")
//        println("l3 is String? ${l3.isString}")
//    }
    /*
    @Test
    fun test2() {
        val data = JsonObject(mapOf(
                "name" to JsonPrimitive("John"),
                "email" to JsonPrimitive("john@gmail.com"),
                "age" to JsonPrimitive(28)
        ))

        val rules = mapOf(
                "name" to listOf(Required(), Size(10), Integer())
                "age" to listOf(Required(), Email(10))
        )

        validate(data, rules)
    }

     */
}

