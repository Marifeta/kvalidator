/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kvalidator

import kotlinx.serialization.Serializable
import kotlinx.serialization.json.*
import java.awt.geom.Arc2D
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.Month
import java.util.jar.Attributes

class Library {
    fun someLibraryMethod(): Boolean {
        return true
    }
}
// список правил, список ошибок,
data class RuleSet(val name: String, val set: List<Rule>)

sealed class Rule {
    abstract val title: String
    abstract val value: Any
    abstract fun validate(data: JsonElement?): Boolean
}

class Error {
    val errors: MutableMap<String, MutableList<String>> = mutableMapOf()

    fun add(attribute: String, reason: String): Unit {
        if (errors.contains(attribute)) {
            errors[attribute]?.add(reason)
        } else {
            errors[attribute] = mutableListOf(reason)
        }
        println(errors)
    }

    fun first(attribute: String): String? {
        if (errors.contains(attribute)) {
            return errors[attribute]?.get(0)
        }
        return null
    }

    fun get(attribute: String): List<String>? {
        if (errors.contains(attribute)) {
            return errors[attribute]?.toList()
        }
        return null
    }

    fun all(): MutableMap<String, MutableList<String>>? {
        if (errors.isEmpty()) {
            return null
        }
        return errors
    }
}

val inputErrors = Error()

class Validator(val data: JsonElement, val rules: Map<String, List<Rule>>) {
    var errorCount = 0
    val inputErrors = Error()
    fun validate(): Boolean {
        when (data) {
            is JsonNull -> println("null")
            is JsonArray -> println("array")
            is JsonObject -> {
                rules.forEach { list ->
                    list.value.forEach {
                        val accumulator = it.validate(data[list.key])
                        if (!accumulator) {
                            inputErrors.add(list.key, "something wrong")
                            errorCount++
                        }
                    }
                }
            }
        }
        return errorCount == 0
    }
}

fun getSize(value: JsonElement?): Double? {
    return when (value) {
        is JsonPrimitive -> {
            val c = value as JsonLiteral

            when {
                c.isString -> c.content.length.toDouble()
                value.doubleOrNull != null -> value.double
                value.booleanOrNull != null || value.isNull -> null
                else -> null
            }
        }
        is JsonObject -> value.size.toDouble()
        is JsonArray -> value.size.toDouble()
        else -> null
    }
}

class Size(override val value: Int) : Rule() {
    override val title: String = "size"
    override fun validate(data: JsonElement?): Boolean {
        val elSize = getSize(data)
        if (elSize != null && elSize > 0) {
            val userSize = value.toDouble()
            return elSize == userSize
        } else if (elSize == null) {
            return false
        }
        return true
    }
}

class Min(override val value: Int) : Rule() {
    override val title: String = "min"
    override fun validate(data: JsonElement?): Boolean {
        val elSize = getSize(data)
        val userSize = value.toDouble()
        if (elSize != null && elSize > 0) {
            return elSize >= userSize
        }
        return true
    }
}

class IsNumeric(override val value: Any = "") : Rule() {
    override val title = "isNumeric"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    c.isString -> false
                    data.booleanOrNull != null || data.isNull -> false
                    data.doubleOrNull != null -> true
                    else -> false
                }
            }
            else -> false
        }
    }
}

class IsInteger(override val value: Any = "") : Rule() {
    override val title = "isInteger"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    c.isString -> false
                    data.booleanOrNull != null || data.isNull -> false
                    data.intOrNull != null -> true
                    else -> false
                }
            }
            else -> false
        }
    }
}

class IsString(override val value: Any) : Rule() {
    override val title = "isString"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    c.isString -> true
                    else -> false
                }
            }
            else -> false
        }
    }
}

class Max(override val value: Int) : Rule() {
    override val title: String = "max"
    override fun validate(data: JsonElement?): Boolean {
        val elSize = getSize(data)
        val userSize = value.toDouble()
        if (elSize != null && elSize > 0) {
            return elSize <= userSize
        }
        return true
    }
}

class Not_In(override val value: Int, val value2: Int) : Rule() {
    override val title: String = "not_in"
    override fun validate(data: JsonElement?): Boolean {
        val elSize = getSize(data)
        val userSize = value.toDouble()
        val userSize2 = value2.toDouble()
        if (elSize != null && elSize > 0) {
            return userSize < elSize || elSize > userSize2
        }
        return true
    }
}

class Between(override val value: Int, val value2: Int) : Rule() {
    override val title: String = "not_in"
    override fun validate(data: JsonElement?): Boolean {
        val elSize = getSize(data)
        val userSize = value.toDouble()
        val userSize2 = value2.toDouble()
        if (elSize != null && elSize > 0) {
            return userSize > elSize || elSize < userSize2
        }
        return true
    }
}

class IsBoolean(override val value: Any) : Rule() {
    override val title: String = "isBoolean"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    c.isString -> false
                    data.doubleOrNull != null -> false
                    data.booleanOrNull != null -> true
                    else -> false
                }
            }
            else -> false
        }
    }
}

class Alpha(override val value: Any = "") : Rule() {
    override val title: String = "alpha"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    data.booleanOrNull != null -> false
                    c.isString -> {
                        val regex = Regex(pattern = """[A-Za-zА-Яа-яёЁ]+$""")
                        return regex.matches(input = data.content)
                    }
                    else -> false
                }
            }
            else -> false
        }
    }
}
class AlphaNum(override val value: Any = "") : Rule() {
    override val title: String = "alphaNum"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    data.booleanOrNull != null -> false
                    c.isString || data.doubleOrNull != null-> {
                        val regex = Regex(pattern = """[A-Za-zА-Яа-яёЁ0-9]+$""")
                        return regex.matches(input = data.content)
                    }
                    else -> false
                }
            }
            else -> false
        }
    }
}

class AlphaDash(override val value: Any = "") : Rule() {
    override val title: String = "alphaDash"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    data.booleanOrNull != null -> false
                    c.isString || data.doubleOrNull != null-> {
                        val regex = Regex(pattern = """[A-Za-zА-Яа-яёЁ0-9_\-]+$""")
                        return regex.matches(input = data.content)
                    }
                    else -> false
                }
            }
            else -> false
        }
    }
}

class Url(override val value: Any = "") : Rule() {
    override val title: String = "url"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    data.booleanOrNull != null -> false
                    c.isString -> {
                        val regex = Regex(
                                pattern = """https?://(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)"""
                        )
                        val url = regex.find(input = data.content)?.value.orEmpty()
                        return url.isNotEmpty()
                    }
                    else -> false
                }
            }
            else -> false
        }
    }
}

class Email(override val value: Any = "") : Rule() {
    override val title: String = "email"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    data.booleanOrNull != null -> false
                    c.isString -> {
                        val regex = Regex(
                                pattern = """^(?!\.)\("([^"\r\\]|\\["\r\\])*"|\([-a-z0-9!#${'$'}%&'*+/=?^_`{|}~] |\(?@[a-z0-9][\w.-]*[a-z0-9]\.[a-z][a-z.]*[a-z]$"""
                        )
                        val email = regex.find(input = data.content)?.value.orEmpty()
                        return email.isNotEmpty()
                    }
                    else -> false
                }
            }
            else -> false
        }
    }
}

class Accepted(override val value: Any) : Rule() {
    override val title: String = "accepted"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    c.isString && data.content == "yes"-> true
                    c.isString && data.content == "no"-> true
                    c.isString && data.content == "1"-> true
                    data.boolean -> data.boolean
                    data.doubleOrNull != null && data.double == 1.00 -> true
                    else -> false
                }
            }
            else -> false
        }
    }
}

class IsArray(override val value: Any = "") : Rule() {
    override val title: String = "isArray"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonArray -> {
                return true
            }
            else -> false
        }
    }
}

class IsDate(override val value: Any = "") : Rule() {
    override val title: String = "isDate"
    override fun validate(data: JsonElement?): Boolean {
        return when (data) {
            is JsonPrimitive -> {
                val c = data as JsonLiteral
                when {
                    c.isString -> {
                        // проверяем точки, количество цифр, заменяем точки на тире и парсим дату
                        val date = LocalDate.parse(data.content)
                        println("date")
                        println(date)
                        return true
                    }
                    else -> false
                }
            }
            else -> false
        }
    }
}



@Serializable data class TestData(val name: String, val age: Int)


